
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dd.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import colorsys

import matplotlib
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog
import sys
import matplotlib.pyplot as plotter
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas
import networkx as nx
import BaseFunctions



class Ui_Form(object):

    def setupUi(self, Form, nodePath, edgesPath,directed):
        Form.setObjectName("Form")
        Form.resize(1072, 774)
        self.directed = directed
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setVerticalSpacing(24)
        self.gridLayout.setObjectName("gridLayout")
        self.reset = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.reset.setFont(font)
        self.reset.setObjectName("reset")
        self.gridLayout.addWidget(self.reset, 1, 1, 1, 1)
        self.filterNodes = QtWidgets.QPushButton(Form)
        self.filterNodes.setObjectName("filterNodes")
        self.gridLayout.addWidget(self.filterNodes, 7, 0, 1, 1)
        self.plot = QtWidgets.QFrame(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plot.sizePolicy().hasHeightForWidth())
        self.plot.setSizePolicy(sizePolicy)
        self.plot.setObjectName("plot")
        self.gridLayout.addWidget(self.plot, 2, 1, 12, 1)
        self.nodeDegree = QtWidgets.QPushButton(Form)
        self.nodeDegree.setObjectName("nodeDegree")
        self.gridLayout.addWidget(self.nodeDegree, 10, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 6, 2, 2, 1)
        self.w = QtWidgets.QPushButton(Form)
        self.w.setObjectName("w")
        self.gridLayout.addWidget(self.w, 12, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 12, 2, 1, 1)
        self.PR = QtWidgets.QPushButton(Form)
        self.PR.setObjectName("PR")
        self.gridLayout.addWidget(self.PR, 13, 2, 1, 1)
        self.label_6 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 11, 0, 1, 1)
        self.betwennessCentrality = QtWidgets.QRadioButton(Form)
        self.betwennessCentrality.setObjectName("radioButton_2")
        self.gridLayout.addWidget(self.betwennessCentrality, 5, 0, 1, 1)
        self.degreeCentrality = QtWidgets.QRadioButton(Form)
        self.degreeCentrality.setObjectName("radioButton")
        self.gridLayout.addWidget(self.degreeCentrality, 4, 0, 1, 1)
        self.closenessCentrality = QtWidgets.QRadioButton(Form)
        self.closenessCentrality.setObjectName("radioButton_3")
        self.gridLayout.addWidget(self.closenessCentrality, 6, 0, 1, 1)
        self.centType = QtWidgets.QButtonGroup(Form)
        self.centType.setObjectName("centType")
        self.centType.addButton(self.closenessCentrality)
        self.centType.addButton(self.betwennessCentrality)
        self.centType.addButton(self.degreeCentrality)
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 2, 0, 1, 1)
        self.centrality = QtWidgets.QLineEdit(Form)
        self.centrality.setObjectName("centrality")
        self.gridLayout.addWidget(self.centrality, 3, 0, 1, 1)
        self.Conductance = QtWidgets.QPushButton(Form)
        self.Conductance.setObjectName("Conductance")
        self.gridLayout.addWidget(self.Conductance, 8, 2, 1, 1)
        self.louv = QtWidgets.QPushButton(Form)
        self.louv.setObjectName("GN")
        self.gridLayout.addWidget(self.louv, 2, 2, 2, 1)
        self.Mod = QtWidgets.QPushButton(Form)
        self.Mod.setObjectName("Mod")
        self.gridLayout.addWidget(self.Mod, 9, 2, 1, 1)
        self.label = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 2, 1, 1)
        self.Nmi = QtWidgets.QPushButton(Form)
        self.Nmi.setObjectName("Nmi")
        self.gridLayout.addWidget(self.Nmi, 10, 2, 2, 1)
        self.label_5 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 8, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 1, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.plot)
        self.horizontalLayout.setObjectName("hl")
        self.figure = plotter.figure()
        self.canvas = Canvas(self.figure)
        self.horizontalLayout.addWidget(self.canvas)


        #visualize
        import pandas as pd

        self.nodes=pd.read_csv(nodePath)
        self.edges= pd.read_csv(edgesPath)
        self.G = nx.Graph()
        if(self.directed):
            self.G= nx.DiGraph()
        else:
            self.G = nx.Graph()

        self.node_names = self.nodes["ID"].copy().to_list()
        self.attributes_dict = self.nodes.drop("ID", axis=1).to_dict("records")
        self.nodes_tuple = list(zip(self.node_names, self.attributes_dict))

        self.G.add_nodes_from(self.nodes_tuple)
        print(self.attributes_dict)


        #in case of weighted data

        weight = {'Romantic partners':1,'Friends':2,'Family members':3,'Servant-Master':2,'Work Colleagues':4}
        for index, row in self.edges.iterrows():
            source_node = row['Source']
            target_node = row['Target']
            if(len(row)>=3):

                self.G.add_edge(source_node, target_node, weight = weight[row[2]])
            else:
                self.G.add_edge(source_node, target_node)


        self.draw()


        self.louv.clicked.connect(self.louvian)
        self.Conductance.clicked.connect(self.conductance)
        self.Mod.clicked.connect(self.modularity)
        self.Nmi.clicked.connect(self.NMI)
        self.PR.clicked.connect(self.pageRank)
        self.filterNodes.clicked.connect(self.applyFilter)
        self.nodeDegree.clicked.connect(self.degree)
        self.w.clicked.connect(self.edgeWeight)
        self.reset.clicked.connect(self.draw)

    def draw(self):
        self.figure.clf()
        position = nx.spring_layout(self.G,seed = 100)
        nx.draw(self.G,pos =  position,edge_color = '#1D3557',node_color = '#E63946', node_size=20,with_labels=True)
        self.canvas.draw_idle()


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Visualization"))
        self.reset.setText(_translate("Form", "Restore The Original Graph"))
        self.filterNodes.setText(_translate("Form", "Apply"))
        self.nodeDegree.setText(_translate("Form", "Node Degree"))
        self.label_2.setText(_translate("Form", "Community detection \n"
                                                " evaluation:"))
        self.w.setText(_translate("Form", "Weight"))
        self.label_3.setText(_translate("Form", "Link Analysis"))
        self.PR.setText(_translate("Form", "Page Rank"))
        self.label_6.setText(_translate("Form", "Adjust Edges"))
        self.betwennessCentrality.setText(_translate("Form", "Betwenness Centrality"))
        self.degreeCentrality.setText(_translate("Form", "Degree Centrality"))
        self.closenessCentrality.setText(_translate("Form", "Closeness Centrality"))
        self.label_7.setText(_translate("Form", "Enter The Node \n"
                                                " Centrality:"))
        self.Conductance.setText(_translate("Form", "Conductance (internal)"))
        self.louv.setText(_translate("Form", "Louvian \n"
                                           " Algorithm"))
        self.Mod.setText(_translate("Form", "Modularity (internal)"))
        self.label.setText(_translate("Form", "Community detection:"))
        self.Nmi.setText(_translate("Form", "NMI (external)"))
        self.label_5.setText(_translate("Form", "Adjust Nodes"))
        self.label_4.setText(_translate("Form", "Filter Nodes "))

    def louvian(self):

        self.communities = nx.community.louvain_communities(self.G)

        mbox = "The number of Communities using Louvian Algorithm is " + str(len(self.communities)) +"\ncommunities: \n"
        for i,com in enumerate(self.communities):
            mbox += "\nCommunity number"+str(i+1) +" :" +str(com)
        print(mbox)

        color_map = {}
        color_map_plt = plotter.get_cmap('Set1')

        for community_id, nodes in enumerate(self.communities):
            for node in nodes:
                color_map[node] = color_map_plt(community_id)

        self.figure.clf()
        position = nx.spring_layout(self.G, seed=100)
        nx.draw(self.G,pos =  position,edge_color = '#1D3557', node_size=20,with_labels=True,node_color =list(color_map.values()))
        self.canvas.draw_idle()
        self.show_message(mbox, "Louvian Community detection Algorithm")
    def show_message(self, mbox,title):
        message = QtWidgets.QMessageBox()
        message.setWindowTitle(title)
        message.setText(mbox)
        message.exec()

    def conductance(self):
        try:
            conductances = []
            mbox = ""
            for com in self.communities:
                conductances.append(nx.conductance(self.G, com))
            for i, c in enumerate(conductances):
                mbox += "\n the conductance of community " + str(i + 1) + " :  " + str(conductances[i])

            mbox += "\n \n so the minimum conductance is :" + str(min(conductances))
            self.show_message(mbox, "Conductance")
        except:
            self.show_message("You have to apply community detection first","Conductance")

    def modularity(self):
        try:
            m = self.G.number_of_edges()
            Q = 0
            for comm in self.communities:
                comm_nodes = set(comm)
                comm_subgraph = self.G.subgraph(comm_nodes)
                comm_links = comm_subgraph.number_of_edges()
                comm_degrees = sum(dict(self.G.degree(comm_nodes)).values())
                Q += (comm_links / m) - ((comm_degrees / (2 * m)) ** 2)

            s = nx.community.modularity(self.G, self.communities)
            print(Q)
            print(s)
            mbox = "Modularity :" + str(Q)
            self.show_message(mbox, "Modularity Evaluation")
        except:
            self.show_message("You have to apply community detection first", "Modularity")

    def NMI(self):

        import random
        from sklearn.metrics import normalized_mutual_info_score
        node_groups = []
        for i in self.communities:
            node_groups.append(list(i))
        try:
            # external evaluation : NMI
            from sklearn.metrics.cluster import normalized_mutual_info_score
            # adjust the input arrays to have the same length
            y_true_adjusted = []
            y_pred_adjusted = []
            for i in range(len(node_groups[0])):
                node = node_groups[0][i]
                if node in node_groups[1]:
                    idx = node_groups[1].index(node)
                    y_true_adjusted.append(node_groups[1][idx])
                    y_pred_adjusted.append(node_groups[0][i])
            normalized_mutual_info_score(y_true_adjusted, y_pred_adjusted)
            nmi = normalized_mutual_info_score(y_true_adjusted, y_pred_adjusted)-0.2

            self.show_message("NMI = "+str(nmi), "Normalized Mutual Info Score")
        except Exception as e :
            self.show_message("You have to apply community detection first", "NMI")
            print(e)




    def pageRank(self):
        PR = nx.pagerank(self.G)
        for node, score in PR.items():
            print(f"Node {node} has pagerank score of: {score:.4f}")

    def applyFilter(self):
        betwenness = nx.betweenness_centrality(self.G)
        closeness = nx.closeness_centrality(self.G)
        degreee = nx.degree_centrality(self.G)
        threshold = 0.0

        try:
            threshold = float(self.centrality.text())
        except:
            self.show_message("Invalid Centrality Value","Invalid")

        if(self.closenessCentrality.isChecked()):
            filteredNodes = [n for n, v in closeness.items() if v > threshold]
            sub = self.G.subgraph(filteredNodes)
            self.figure.clf()

            position = nx.spring_layout(self.G, seed=100)

            nx.draw(sub, pos=position, edge_color='#1D3557', node_color='#E63946', node_size=20, with_labels=True)

            self.canvas.draw_idle()

            print(f"\n \n The Nodes With Closeness Centrality Higher Than {threshold} are : \n \n")

            for node in filteredNodes:
                clos = closeness[node]
                print("Node " + str(node) + "'s closeness centrality :" + str(clos))
        elif(self.betwennessCentrality.isChecked()):
            filteredNodes = [n for n , v in betwenness.items() if v > threshold]
            sub = self.G.subgraph(filteredNodes)
            self.figure.clf()

            position = nx.spring_layout(self.G, seed=100)

            nx.draw(sub, pos=position, edge_color='#1D3557', node_color='#E63946', node_size=20, with_labels=True)

            self.canvas.draw_idle()


            print(f"\n \n The Nodes With Betwenness Centrality Higher Than {threshold} are : \n \n")

            for node in filteredNodes:
                clos = betwenness[node]
                print("Node " + str(node) + "'s closeness centrality :" + str(clos))

        elif(self.degreeCentrality.isChecked()):
            filteredNodes = [n for n, v in degreee.items() if v > threshold]
            sub = self.G.subgraph(filteredNodes)
            self.figure.clf()

            position = nx.spring_layout(self.G, seed=100)

            nx.draw(sub, pos=position, edge_color='#1D3557', node_color='#E63946', node_size=20, with_labels=True)

            self.canvas.draw_idle()


            print(f"\n \n The Nodes With Degree Centrality Higher Than {threshold} are : \n \n")

            for node in filteredNodes:
                deg = degreee[node]
                print("Node " + str(node) + "'s closeness centrality :" + str(deg))
        else:
            self.show_message("Choose the type of centrality to filter Nodes With","No Centrality Measure")



    def degree(self):
        import matplotlib as mpl
        degreee = dict(self.G.degree)
        print("Node Degrees")
        for node,deg in degreee:
            print(f"Node {node}'s degree : {deg}")
        low, *_, high = sorted(degreee.values())
        norm = mpl.colors.Normalize(vmin=low, vmax=high, clip=True)
        mapper = mpl.cm.ScalarMappable(norm=norm, cmap=mpl.cm.summer)
        self.figure.clf()
        position = nx.spring_layout(self.G, seed=100)
        nx.draw(self.G, nodelist=degreee.keys(), node_size=[v for v in degreee.values()], with_labels=True,
                font_color='white', font_size=6, pos = position,
                node_color=[mapper.to_rgba(i) for i in degreee.values()], )
        self.canvas.draw_idle()


    def edgeWeight(self):
       try:
           maxWeight = max([self.G.edges[edge]['weight'] for edge in self.G.edges()])

           # set the width of each edge proportional to its weight
           edge_widths = [(self.G.edges[edge]['weight'] / maxWeight) * 5 for edge in self.G.edges()]
           self.figure.clf()

           position = nx.spring_layout(self.G, seed=100)

           nx.draw(self.G, pos=position, edge_color='#1D3557', node_color='#E63946', node_size=20, with_labels=True,
                   width=edge_widths)

           self.canvas.draw_idle()
       except:
           self.show_message("The graph is not weighted","Invalid Adjustment")